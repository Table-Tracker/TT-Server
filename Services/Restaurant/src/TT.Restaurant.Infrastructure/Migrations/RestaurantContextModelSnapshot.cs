// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TT.Restaurant.Infrastructure;

#nullable disable

namespace TT.Restaurant.Infrastructure.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    partial class RestaurantContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TT.Restaurant.Domain.Models.Franchise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Franchises");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.Map", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Base64MapData")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Ingredients")
                        .HasColumnType("longtext");

                    b.Property<Guid>("MenuSectionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MenuSectionId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.MenuSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuSection");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("VisitorId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<Guid>("FranchiseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("GuestNumber")
                        .HasColumnType("int");

                    b.Property<int>("InsideNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TableSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.Map", b =>
                {
                    b.HasOne("TT.Restaurant.Domain.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.MenuItem", b =>
                {
                    b.HasOne("TT.Restaurant.Domain.Models.MenuSection", "MenuSection")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuSection");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.MenuSection", b =>
                {
                    b.HasOne("TT.Restaurant.Domain.Models.Restaurant", "Restaurant")
                        .WithMany("MenuSections")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.Reservation", b =>
                {
                    b.HasOne("TT.Restaurant.Domain.Models.Table", "Table")
                        .WithMany("Reservations")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.Restaurant", b =>
                {
                    b.HasOne("TT.Restaurant.Domain.Models.Franchise", "Franchise")
                        .WithMany("Restaurants")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.Table", b =>
                {
                    b.HasOne("TT.Restaurant.Domain.Models.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.Franchise", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.MenuSection", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.Restaurant", b =>
                {
                    b.Navigation("MenuSections");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("TT.Restaurant.Domain.Models.Table", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
